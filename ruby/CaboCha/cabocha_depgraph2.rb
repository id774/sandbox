# -*- coding: utf-8 -*-

require 'CaboCha'
require 'awesome_print'

# sent = "太郎はこの本を二郎を見た女性に渡した。"
sent = "フリーソフトウェアに初めてふれたばかりの人の多くは、フリーソフトウェアの 「フリー」と言う言葉が、期待した使われ方と違うのに戸惑います。 多くの人にとってフリーの意味は「無料の」と言う意味です。 英語の辞書の「Free」の項目には、12 種類の違った意味が載っています。 そのたった一項目が「無料の」です。 その他は自由や制約が無い事を指しています。 私たちが フリーソフトウェア と言うときは、値段の事ではなく 自由の事を言います。

お金を払わなくても良い、と言う意味だけのフリーなソフトウェアは、 フリーだなどとは全く言えません。 それを人にあげる事も禁じられるでしょうし、改良する事などほとんど絶対に 許されないでしょう。 無料に使用する事を許可されるソフトウェアとは、通常 マーケティング・キャンペーン上、関連商品の販促用に使ったり、 より小さい競争相手を廃業に追い込むための武器です。 それらが将来的にもずっと無料だと言う保証はないのです。

本当にフリーなソフトウェアは常にフリーです。 パブリック・ドメインにされたソフトウェアは、すくい上げられてフリーでない プログラムに組み込まれてしまうと、もうそれ以上フリーではありません。 それ以後に加えられた改良は社会から失なわれてしまいます。 フリーのままでいるためには、ソフトウエアはコピーライト (著作権の主張) とライセンス (使用の許可) を持たなければなりません。

初心者の人にとっては、ソフトウェアが無料なのか、そうでないのか、 のどちらかでしょうが、 現実の世界はそれよりはるかに複雑です。 人々がソフトウェアをフリーだと言うときに、どういう事が背後にあるのかを 理解するために、少し回り道をしてソフトウェア・ライセンスの世界に 触れてみましょう。

コピーライト (著作権) とはある種の仕事をした、作者の権利を守るための方法です。 大抵の国では、あなたの書いたソフトウェアは自動的に著作権が発生します。 ライセンスとは、作者が自分の作品 (この場合ソフトウェア) をどういう風な使われ方を して欲しいのか、もしくは他の人にとってはそれをどう言う風に使うのが 作者にとって許容できうる事なのかを記した物です。 ソフトウェアがどのように使われるべきかを明示したライセンスを付け加えるか どうかは、作者の判断によります。 もっと適切なコピーライトの議論については、 http://www.copyright.gov/ を見てください。

当然の事ですが、違った状況では違ったライセンスが必要になります。 ソフトウェア企業は自分たちの資産を守るために、ソフトウェアを (人間に読めない) コンパイル・コードのみでリリースしたり、ソフトウェアの使われ方に多くの制限を 付けたりします。 一方、フリーソフトウェアの作者たちは、大抵、以下のような理由 (の組み合わせ) を期待しています。

    独占的なソフトウェアの中での、自分のコードの使用を禁止したい。 作者はみんなに使ってもらうために公開したのであって、他の人がそれを盗む ような事態を望んでいないのです。 この場合、コードの利用は信頼とみなせます。同じルールにしたがっている限 り、そのコードを使うことができるのです。
    コードの原作者の表示を守りたい。 人は自分の作品に大きなプライドを持っているので、他の人がやってきて作者の名前の表示を取ってしまったり、自分が書いたと偽る事はして欲しくないのです。
    ソースコードの配布。 商用のほとんどのコードの問題の一つは、ソースコードが無いのでバグを自分で直したり、カスタマイズする事ができない事です。 それに、企業があなたの使っているハードウェアのサポートを止めてしまう事もあります。 多くのフリーライセンスはソースコードの配布を義務づけてます。 これは、ユーザが自分のニーズで、ソフトウェアをカスタマイズできる事を守ります。
    作品の一部を含む作品 (コピーライトの議論で言う派生された作品/二次的著作物)、にも同じライセンスを使って欲しい。 

いろいろな人が、自分自身のライセンスを書いています。 自分自身の望んでいるようなライセンスを作成するというのは非常に難しいこと であるため、このような事はあまり奨励されません。 多くの場合、使われている言葉が不明確だったり、他の人の物と相容れなかったりします。 法廷で引き合いに出されるライセンスを書く事は、もっとむずかしいでしょう。 幸運な事に、すでに書かれているものの中で、たぶんあなたの要求に合う幾つかのライセンスがあります。 "

def depgraph(sent)
  cabocha = CaboCha::Parser.new('--charset=UTF8')
  tree = cabocha.parse(sent)
  sentence = []
  words = [{"id" => "0", "link" => 0}]

  chank_words = lambda {|x|
    unless words[x]["word"].nil?
      sentence << words[x]["word"]
      link = words[x]["link"].to_i
      chank_words.call(link) unless link == 0
    end
  }

  tree.toString(4).force_encoding("utf-8").split("\n").each {|phrase|
    element = phrase.strip.split("\t")
    hash = {}
    hash["id"] = element[0]
    hash["word"] = element[1]
    hash["feature"] = element[3]
    hash["link"] = element[6]
    hash["rel"] = element[7]
    words << hash
  }

  i = 0
  return_sentence = []
  before_noun = false
  while (i < words.length)
    sentence = []
    if before_noun
      if words[i]["feature"] == "動詞" or
         words[i]["feature"] == "連体詞"
        chank_words.call(i)
      end
    else
      if words[i]["feature"] == "名詞" or
         words[i]["feature"] == "動詞" or
         words[i]["feature"] == "連体詞"
        chank_words.call(i)
      end
    end
    words[i]["feature"] == "名詞" ? before_noun = true : before_noun = false
    return_sentence << sentence.join if sentence.length > 0
    i += 1
  end

  return_sentence
end

if __FILE__ == $0
  sent_array = sent.rstrip.split("。")
  sent_array.each do |s|
    ap depgraph(s)
  end
end

